// Code generated by mockery v2.36.0. DO NOT EDIT.

package userservice

import (
	responseDto "CardozoCasariegoLuciano/StudyNotes/Dto/ResponseDto"

	mock "github.com/stretchr/testify/mock"
)

// MockIUserService is an autogenerated mock type for the IUserService type
type MockIUserService struct {
	mock.Mock
}

type MockIUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserService) EXPECT() *MockIUserService_Expecter {
	return &MockIUserService_Expecter{mock: &_m.Mock}
}

// EditUser provides a mock function with given fields: id, name, image
func (_m *MockIUserService) EditUser(id uint, name string, image string) (*responseDto.UserDto, error) {
	ret := _m.Called(id, name, image)

	var r0 *responseDto.UserDto
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string) (*responseDto.UserDto, error)); ok {
		return rf(id, name, image)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string) *responseDto.UserDto); ok {
		r0 = rf(id, name, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responseDto.UserDto)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(id, name, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_EditUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditUser'
type MockIUserService_EditUser_Call struct {
	*mock.Call
}

// EditUser is a helper method to define mock.On call
//   - id uint
//   - name string
//   - image string
func (_e *MockIUserService_Expecter) EditUser(id interface{}, name interface{}, image interface{}) *MockIUserService_EditUser_Call {
	return &MockIUserService_EditUser_Call{Call: _e.mock.On("EditUser", id, name, image)}
}

func (_c *MockIUserService_EditUser_Call) Run(run func(id uint, name string, image string)) *MockIUserService_EditUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIUserService_EditUser_Call) Return(_a0 *responseDto.UserDto, _a1 error) *MockIUserService_EditUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_EditUser_Call) RunAndReturn(run func(uint, string, string) (*responseDto.UserDto, error)) *MockIUserService_EditUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: id
func (_m *MockIUserService) FindByID(id uint) (*responseDto.UserDto, error) {
	ret := _m.Called(id)

	var r0 *responseDto.UserDto
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*responseDto.UserDto, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *responseDto.UserDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responseDto.UserDto)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockIUserService_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - id uint
func (_e *MockIUserService_Expecter) FindByID(id interface{}) *MockIUserService_FindByID_Call {
	return &MockIUserService_FindByID_Call{Call: _e.mock.On("FindByID", id)}
}

func (_c *MockIUserService_FindByID_Call) Run(run func(id uint)) *MockIUserService_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIUserService_FindByID_Call) Return(_a0 *responseDto.UserDto, _a1 error) *MockIUserService_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_FindByID_Call) RunAndReturn(run func(uint) (*responseDto.UserDto, error)) *MockIUserService_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields:
func (_m *MockIUserService) ListAll() ([]responseDto.UserDto, error) {
	ret := _m.Called()

	var r0 []responseDto.UserDto
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]responseDto.UserDto, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []responseDto.UserDto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]responseDto.UserDto)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockIUserService_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
func (_e *MockIUserService_Expecter) ListAll() *MockIUserService_ListAll_Call {
	return &MockIUserService_ListAll_Call{Call: _e.mock.On("ListAll")}
}

func (_c *MockIUserService_ListAll_Call) Run(run func()) *MockIUserService_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIUserService_ListAll_Call) Return(_a0 []responseDto.UserDto, _a1 error) *MockIUserService_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_ListAll_Call) RunAndReturn(run func() ([]responseDto.UserDto, error)) *MockIUserService_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserService creates a new instance of MockIUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserService {
	mock := &MockIUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
