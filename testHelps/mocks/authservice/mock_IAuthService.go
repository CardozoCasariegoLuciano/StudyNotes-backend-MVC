// Code generated by mockery v2.36.0. DO NOT EDIT.

package authservice

import (
	requestDto "CardozoCasariegoLuciano/StudyNotes/Dto/RequestDto"
	responseDto "CardozoCasariegoLuciano/StudyNotes/Dto/ResponseDto"

	mock "github.com/stretchr/testify/mock"
)

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// LoginUser provides a mock function with given fields: user
func (_m *MockIAuthService) LoginUser(user requestDto.LoginUserDto) (*responseDto.UserDto, error) {
	ret := _m.Called(user)

	var r0 *responseDto.UserDto
	var r1 error
	if rf, ok := ret.Get(0).(func(requestDto.LoginUserDto) (*responseDto.UserDto, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(requestDto.LoginUserDto) *responseDto.UserDto); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responseDto.UserDto)
		}
	}

	if rf, ok := ret.Get(1).(func(requestDto.LoginUserDto) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockIAuthService_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - user requestDto.LoginUserDto
func (_e *MockIAuthService_Expecter) LoginUser(user interface{}) *MockIAuthService_LoginUser_Call {
	return &MockIAuthService_LoginUser_Call{Call: _e.mock.On("LoginUser", user)}
}

func (_c *MockIAuthService_LoginUser_Call) Run(run func(user requestDto.LoginUserDto)) *MockIAuthService_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requestDto.LoginUserDto))
	})
	return _c
}

func (_c *MockIAuthService_LoginUser_Call) Return(_a0 *responseDto.UserDto, _a1 error) *MockIAuthService_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_LoginUser_Call) RunAndReturn(run func(requestDto.LoginUserDto) (*responseDto.UserDto, error)) *MockIAuthService_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: user
func (_m *MockIAuthService) RegisterUser(user requestDto.RegisterUserDto) (*responseDto.UserDto, error) {
	ret := _m.Called(user)

	var r0 *responseDto.UserDto
	var r1 error
	if rf, ok := ret.Get(0).(func(requestDto.RegisterUserDto) (*responseDto.UserDto, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(requestDto.RegisterUserDto) *responseDto.UserDto); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responseDto.UserDto)
		}
	}

	if rf, ok := ret.Get(1).(func(requestDto.RegisterUserDto) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockIAuthService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - user requestDto.RegisterUserDto
func (_e *MockIAuthService_Expecter) RegisterUser(user interface{}) *MockIAuthService_RegisterUser_Call {
	return &MockIAuthService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", user)}
}

func (_c *MockIAuthService_RegisterUser_Call) Run(run func(user requestDto.RegisterUserDto)) *MockIAuthService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requestDto.RegisterUserDto))
	})
	return _c
}

func (_c *MockIAuthService_RegisterUser_Call) Return(_a0 *responseDto.UserDto, _a1 error) *MockIAuthService_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_RegisterUser_Call) RunAndReturn(run func(requestDto.RegisterUserDto) (*responseDto.UserDto, error)) *MockIAuthService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
