// Code generated by mockery v2.36.0. DO NOT EDIT.

package utils

import mock "github.com/stretchr/testify/mock"

// MockIbcrypt is an autogenerated mock type for the Ibcrypt type
type MockIbcrypt struct {
	mock.Mock
}

type MockIbcrypt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIbcrypt) EXPECT() *MockIbcrypt_Expecter {
	return &MockIbcrypt_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: hash, plane
func (_m *MockIbcrypt) Compare(hash string, plane string) error {
	ret := _m.Called(hash, plane)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hash, plane)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIbcrypt_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockIbcrypt_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - hash string
//   - plane string
func (_e *MockIbcrypt_Expecter) Compare(hash interface{}, plane interface{}) *MockIbcrypt_Compare_Call {
	return &MockIbcrypt_Compare_Call{Call: _e.mock.On("Compare", hash, plane)}
}

func (_c *MockIbcrypt_Compare_Call) Run(run func(hash string, plane string)) *MockIbcrypt_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIbcrypt_Compare_Call) Return(_a0 error) *MockIbcrypt_Compare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIbcrypt_Compare_Call) RunAndReturn(run func(string, string) error) *MockIbcrypt_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function with given fields: plane
func (_m *MockIbcrypt) HashPassword(plane string) (string, error) {
	ret := _m.Called(plane)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(plane)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plane)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plane)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIbcrypt_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockIbcrypt_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - plane string
func (_e *MockIbcrypt_Expecter) HashPassword(plane interface{}) *MockIbcrypt_HashPassword_Call {
	return &MockIbcrypt_HashPassword_Call{Call: _e.mock.On("HashPassword", plane)}
}

func (_c *MockIbcrypt_HashPassword_Call) Run(run func(plane string)) *MockIbcrypt_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIbcrypt_HashPassword_Call) Return(_a0 string, _a1 error) *MockIbcrypt_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIbcrypt_HashPassword_Call) RunAndReturn(run func(string) (string, error)) *MockIbcrypt_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIbcrypt creates a new instance of MockIbcrypt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIbcrypt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIbcrypt {
	mock := &MockIbcrypt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
